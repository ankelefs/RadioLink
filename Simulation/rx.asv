%*************************************************************************
% Filename: rx.m
%
% Contents: This file contains the receiver block with all synchronizations 
% and compensations.
%*************************************************************************


function [rxSignal, frequencyOffsetEstimate] = rx(channelSignal, rollOffFactor, filterSpan, samplesPerSymbol, samplingFrequency, plotOption)

    % Parameters
    % Where do the values come from, except the example code?
    desiredPower = 2;
    averagingLength = 50;
    maxPowerGain = 20;
    upscalingFactor = 1;
    timingRecoveryDampingFactor = 1;
    timingRecoveryLoopBandwidth = 0.01;
    timingErrorDetectorGain = 5.4;
    phaseRecoveryLoopBandwidth = 0.01;
    phaseRecoveryDampingFactor = 1;
    frameSize = 1133;
    preambleDetectionThreshold = 8;
    




    %********************************
    % Automatic Gain Control     
    %********************************
    % Improves accuracy by oversampling the received signal, and keeps the output power constant.
    agc_object = comm.AGC( ...
        'DesiredOutputPower',       desiredPower, ...
        'AveragingLength',          averagingLength, ...
        'MaxPowerGain',             maxPowerGain);

    rxSignal_agc = agc_object(channelSignal);
    
    


    %********************************
    % Matched Filter    
    %********************************
    rootRaisedCosineFilter_object = rcosdesign(rollOffFactor, filterSpan, samplesPerSymbol);   

    rxSignal_matchedFiltered = upfirdn(rxSignal_agc, rootRaisedCosineFilter_object, upscalingFactor, samplesPerSymbol); 
    
    % Remove the ramp-up and ramp-down of the receive-filter
    rxSignal_matchedFiltered = rxSignal_matchedFiltered(filterSpan + 1 : end - (filterSpan));

    


    %****************************************************************
    % Coarse Frequency Offset Esimation and Compensation    
    %****************************************************************
    % Due to the difference in local oscillator frequencies and phase
    coarseFrequencyEstimator_object = comm.CoarseFrequencyCompensator( ...  
        'Modulation',           'QPSK', ...
        'Algorithm',            'Correlation-based', ...
        'SampleRate'            samplingFrequency*samplesPerSymbol);
    
    [~, coarseFrequencyOffsetEstimate] = coarseFrequencyEstimator_object(rxSignal_matchedFiltered);

            
    coarseFrequencyCompensator_object = comm.PhaseFrequencyOffset( ...
        'PhaseOffset',              0, ...                                                  % (?) Why is PhaseOffset 0?
        'FrequencyOffsetSource',    'Input port', ...
        'SampleRate',               samplingFrequency*samplesPerSymbol);

    rxSignal_coarseFrequencyCompensated = coarseFrequencyCompensator_object(rxSignal_matchedFiltered, -coarseFrequencyOffsetEstimate);




    %********************************
    % Timing Recovery
    %********************************
    timingRecovery_object = comm.SymbolSynchronizer( ...
        'TimingErrorDetector',      'Gardner (non-data-aided)', ...
        'SamplesPerSymbol',         samplesPerSymbol, ...
        'DampingFactor',            timingRecoveryDampingFactor, ...
        'NormalizedLoopBandwidth',  timingRecoveryLoopBandwidth, ...
        'DetectorGain',             timingErrorDetectorGain);

    rxSignal_timingRecovered = timingRecovery_object(rxSignal_coarseFrequencyCompensated);




    %********************************
    % Fine Frequency Compensation  
    %********************************
    fineFrequencyCompensator_object = comm.CarrierSynchronizer( ...
        'Modulation',               'QPSK', ...
        'ModulationPhaseOffset',    'Auto', ...
        'SamplesPerSymbol',         samplesPerSymbol, ...
        'DampingFactor',            phaseRecoveryDampingFactor, ...
        'NormalizedLoopBandwidth',  phaseRecoveryLoopBandwidth);

    rxSignal_fineFrequencyCompensated = fineFrequencyCompensator_object(rxSignal_timingRecovered);




    %********************************
    % Frame Synchronizer
    %********************************
    frameSynchronization_object = FrameSynchronizer( ...
        'Preamble',                 barkerCode, ...
        'Threshold',                preambleDetectionThreshold, ...
        'OutputLength',             frameSize);

    rxSignal_frameSynchronized = frameSynchronization_object(rxSignal_fineFrequencyCompensated);




    if(plotOption)
        %plot the graphs
    end




    % Implementation inspiration code

    % PSK modulate barkerSequence used in transmission
    % barkerSymbols = pskmod(barkerSequence, M, pi/M, 'gray');
    % detector = comm.PreambleDetector(barkerSymbols.', 'Threshold', 35);
    % idx = detector(rxSigSync)
    % dataStartIdx = idx+1;
    % rxSigFrame = rxSigSync(dataStartIdx:end);
    % 
    % 
    % Estimate phase offset
    % receivedPilotSymbols = rxSigSync(dataStartIdx-length(barkerSymbols)+1:dataStartIdx-1);
    % % Modulate the known pilot sequence and upsample!!!
    % expectedPilotSymbols = pskmod(barkerSequence(2:end), M, pi/M, 'gray');
    % phaseDifferences = angle(receivedPilotSymbols.* conj(expectedPilotSymbols.'));
    % 
    % % Estimate the phase shift as the mean of the phase differences
    % estPhaseShift = mean(phaseDifferences);% Correct phase shift
    % estPhaseShiftDeg = rad2deg(estPhaseShift)
    % % Correct for phase shift
    % rxSigPhase = rxSigFrame * exp(-1i * estPhaseShift);
    %
    %
    % QPSKDataDecoder 
    % Can be used if general demodulator does not work 

end